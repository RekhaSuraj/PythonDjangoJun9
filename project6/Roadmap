In Django, FBV (Function-Based Views) and CBV (Class-Based Views) are two different ways to handle
logic for your web pages.
FBV - We write views as Python functions.
CBV - We write views as Python classes, often inheriting from Django’s built-in generic views.

| Feature          | FBV                           | CBV                                   |
| ---------------- | ----------------------------- | ------------------------------------- |
| Style            | Function                      | Class                                 |
| Simplicity       | Easier for small/simple views | Better for large/structured projects  |
| Code Reusability | Harder                        | Easier with inheritance/mixins        |
| Customization    | Manual                        | Easy to extend via overriding methods |
| Readability      | Straightforward               | May feel complex initially            |
| Decorators       | Simple to apply               | Requires `method_decorator`           |

Roadmap :
1. Create Project
2. Create myapp1
3. In myapp1/models.py
    class Car(models.Model):
    Name = models.CharField(max_length=30)
    Color = models.CharField(max_length=20)
    Price = models.IntegerField()
    Launch = models.DateField()

4. Create a py file forms.py manually
    from django import forms
    from myapp1.models import Car

    # The Meta inner class tells Django which model to use (Car) and which fields to include.
    # fields = "__all__" means include all fields from the Car model in the form.

    This defines a form called Car_form that inherits from forms.ModelForm.
    ModelForm automatically generates a form based on the fields in the Car model.


    class Car_form(forms.ModelForm):
        class Meta:
            model = Car
            fields = "__all__"

5. Create template folder and create a new html file 'list.html'
6. views.py
    from myapp1.models import Car

# Create your views here.
def car_list(request):
    car = Car.objects.all()
    return render(request,"list.html", {'car': car})


7. Settings.py
    1. Include 'myapp1'
    2. Inside TEMPLATES = ['DIRS': [os.path.join('template')],
    3. DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'car',
        'USER': 'root',
        'PASSWORD': 'root'
    }
}

8. urls.py

from myapp1 import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path("",views.car_list)
]

9. In terminal, pip install mysqlclient if needed
10. Make sure database 'car' is present, if not, create one
11. py manage.py makemigrations
12. py manage.py migrate
13. py manage.py runserver
14. If no records are there in DB, else message should be shown
15. Now insert a record in table myapp1.car and refresh


Roadmap for Adding new cars
1. In list.html
<a href="/form">Add Cars</a>
2. views.py
def carForms(request):
    var1 = forms.Car_form() #Create an empty form
    if request.method == 'POST':
        var2 = forms.Car_form(request.POST)
        if var2.is_valid():
            var2.save() #DB save
            return redirect('/') #redirect to calling page
        else:
            print(var2.errors)

    return render(request,'form.html',{'var1': var1})

3. form.html
4. urlpatterns = [
    path('admin/', admin.site.urls),
    path("",views.car_list),
    path('form/',views.carForms),
]

Update Roadmap:

CSRF stands for Cross-Site Request Forgery.
It’s a type of security attack where a malicious website tricks a logged-in user into submitting a dangerous request to another website where the user is authenticated.

Real-Life Analogy
Imagine:You’re logged into your bank website in one browser tab.
In another tab, you visit a malicious site that runs hidden code like:


Real-Life Analogy
Imagine:

You’re logged into your bank website in one browser tab.

In another tab, you visit a malicious site that runs hidden code like:

<form action="https://yourbank.com/transfer" method="POST">
  <input name="amount" value="10000">
  <input name="to_account" value="hacker_account">
  <input type="submit">
</form>


Without protection, the browser might send the request with your bank login session, unknowingly transferring money.
So when we include csrf token in our form, following is what happens in backend:
Behind the scenes:

Django generates a token.
The form includes this token.
When you submit the form, Django compares the token to what it expects.
If they don’t match, Django blocks the request — attack prevented.

Feature	            GET	                                    POST
Purpose	            Retrieves data from the server	        Sends data to the server
Data in Request	    Sent in the URL (query parameters)	    in the request body Sent
Visibility	        Data is visible in the URL	            Data is hidden in the request body
Security	        Less secure (data exposed in URL)	    More secure (data in request body, not logged in browser history)
Data Size	        Limited (URLs have length restrictions)	Can send large amounts of data (e.g., file uploads)
Caching	Can be cached	Not cached by default
Idempotency	        Yes (multiple requests return the same result)	No (multiple requests may have different effects)
Use Case	        Fetching data (e.g., search queries)	Submitting forms, uploading files, modifying data
When to Use:
•	Use GET for requests that do not change server state, like retrieving search results.
•	Use POST for actions that change data on the server, like submitting a form or making a payment.

In views.py
def car_update(request, id):
    f1 = Car.objects.get(id=id)
    if request.method == 'POST':
        f2 = forms.Car_form(request.POST, instance=f1)
        if f2.is_valid():
            f2.save()
            return redirect('/')
        else:
            print(f2.errors)

    return render(request, 'update.html',{'f1': f1})


# Delete
def car_delete(request, id):
    var1 = Car.objects.get(id=id)
    var1.delete()

    return redirect('/')


In urls.py
 path('update/<int:id>/',views.car_update),
 path('delete/<int:id>/', views.car_delete),